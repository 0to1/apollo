{"version":3,"file":"826.44cda8ada50fe50f0091.js","mappings":"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","sources":["webpack:///../../../dreamview-core/src/components/panels/PointCloud/LayerMenu/params.ts","webpack:///../../../dreamview-core/src/components/panels/PointCloud/LayerMenu/index.tsx","webpack:///../../../dreamview-core/src/components/panels/PointCloud/index.tsx"],"sourcesContent":["export interface subMenuParams {\n    [key: string]: {\n        defaultVisible: boolean;\n        currentVisible: boolean;\n        vizKey: string;\n    };\n}\n\nexport const layerMenuParams: { [key: string]: subMenuParams } = {\n    Perception: {\n        polygon: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'polygon',\n        },\n        boundingbox: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'boundingbox',\n        },\n\n        pointCloud: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'pointCloud',\n        },\n        unknownMovable: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'unknownMovable',\n        },\n        vehicle: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'vehicle',\n        },\n        unknownStationary: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'unknownUnMovable',\n        },\n        pedestrian: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'pedestrian',\n        },\n        unknown: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'unknown',\n        },\n        bicycle: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'bicycle',\n        },\n        cipv: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'cipv',\n        },\n        velocity: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleVelocity',\n        },\n        heading: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleHeading',\n        },\n        id: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleId',\n        },\n        distanceAndSpeed: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleDistanceAndSpeed',\n        },\n        laneMarker: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'laneMarker',\n        },\n        lidarSensor: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'lidarSensor',\n        },\n        radarSensor: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'radarSensor',\n        },\n        cameraSensor: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'cameraSensor',\n        },\n        v2x: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'v2x',\n        },\n    },\n    Prediction: {\n        priority: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'obstaclePriority',\n        },\n        majorPredictionLine: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'majorPredictionLine',\n        },\n        gaussianInfo: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'gaussianInfo',\n        },\n        minorPredictionLine: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'minorPredictionLine',\n        },\n        interactiveTag: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'obstacleInteractiveTag',\n        },\n    },\n    Routing: {\n        routingLine: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'routingLine',\n        },\n    },\n    Decision: {\n        mainDecision: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'mainDecision',\n        },\n        obstacleDecision: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'obstacleDecision',\n        },\n    },\n    Planning: {\n        planningCar: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'planningCar',\n        },\n        planningTrajectory: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'planningTrajectory',\n        },\n        // 'RSS Info': {\n        //     defaultVisible: false,\n        //     currentVisible: false,\n        //     vizKey: 'pointCloud',\n        // },\n    },\n    Position: {\n        localization: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'localization',\n        },\n        gps: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'gps',\n        },\n        shadow: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'shadow',\n        },\n    },\n    Map: {\n        crosswalk: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'crosswalk',\n        },\n        clearArea: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'clearArea',\n        },\n        junction: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'junction',\n        },\n        pncJunction: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'pncJunction',\n        },\n        lane: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'lane',\n        },\n        road: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'road',\n        },\n        signal: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'signal',\n        },\n        stopSign: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'stopSign',\n        },\n        yieldSign: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'yieldSign',\n        },\n        speedBump: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'speedBump',\n        },\n        parkingSpace: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'parkingSpace',\n        },\n        parkingSpaceId: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'parkingSpaceId',\n        },\n        laneId: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'laneId',\n        },\n    },\n};\n\nexport const formatLayerParams = (params: { [key: string]: subMenuParams }) => {\n    const result: { [key: string]: { [key: string]: boolean } } = {};\n    Object.keys(params).forEach((key) => {\n        const subLayerMenu = params[key];\n        Object.keys(subLayerMenu).forEach((subKey) => {\n            const subParams = subLayerMenu[subKey];\n            result[key] = result[key] || {};\n            result[key][subParams.vizKey] = subParams.currentVisible;\n        });\n    });\n    return result;\n};\n\nexport const getCurrentLayerParams = () => {\n    const localStorageLayerMenuParams = localStorage.getItem('pointCloudLayerMenuParams');\n    let curLayerMenuParams = null;\n    if (localStorageLayerMenuParams) {\n        curLayerMenuParams = JSON.parse(localStorageLayerMenuParams);\n    } else {\n        curLayerMenuParams = layerMenuParams;\n    }\n    return curLayerMenuParams;\n};\n","import React, { useState } from 'react';\nimport { Checkbox, Radio } from '@dreamview/dreamview-ui';\nimport { useTranslation } from 'react-i18next';\nimport useStyle from '../../VehicleViz/useStyle';\nimport { formatLayerParams, getCurrentLayerParams } from './params';\nimport ChannelSelect from '../../base/ChannelSelect';\n\nexport default function LayerMenu(props: any) {\n    const { classes } = useStyle();\n    const {\n        carviz,\n        obstacleChannels,\n        updateObstacleChannel,\n        closeChannel,\n        showPerception,\n        setShowPerception,\n        curChannel,\n        setCurChannel,\n    } = props;\n    const { t } = useTranslation('layerMenu');\n\n    const curLayerMenuParams = getCurrentLayerParams();\n    localStorage.setItem('pointCloudLayerMenuParams', JSON.stringify(curLayerMenuParams));\n    carviz.option.updateLayerOption(formatLayerParams(curLayerMenuParams), 'pointCloud');\n\n    const [layerMenu, setLayerMenu] = useState(curLayerMenuParams);\n    const [menu] = useState(Object.keys(layerMenu));\n    const [currentMenu] = useState(menu[0]);\n    const [, setSubMenu] = useState(layerMenu[currentMenu]);\n\n    const onChange = (v: any) => {\n        setCurChannel(v);\n        updateObstacleChannel(v);\n    };\n\n    return (\n        <div className={classes['layer-menu-container']}>\n            <div className={classes['layer-menu-content']}>\n                <div className={classes['layer-menu-content-left']}>\n                    <span\n                        className={classes['layer-menu-content-right-switch']}\n                        style={{ display: 'inline-block', marginTop: '6px' }}\n                    >\n                        <Checkbox\n                            checked={showPerception}\n                            defaultChecked\n                            onChange={(e) => {\n                                const checked = e.target.checked;\n                                if (checked && obstacleChannels.length) {\n                                    setShowPerception(true);\n                                    updateObstacleChannel(curChannel);\n                                } else {\n                                    setShowPerception(false);\n                                    closeChannel();\n                                }\n                            }}\n                        />\n                    </span>\n                    {t('perception')}\n                </div>\n                <div className={classes['layer-menu-content-right']}>\n                    <ChannelSelect value={curChannel} options={obstacleChannels} onChange={(v) => onChange(v)} />\n                    <div className={classes['layer-menu-horizontal-line']} />\n                    <li className={classes['layer-menu-content-right-li']}>\n                        <span className={classes['layer-menu-content-right-switch']}>\n                            <Radio\n                                checked={layerMenu.Perception.polygon.currentVisible}\n                                onChange={(e: any) => {\n                                    const value = e.target.checked;\n                                    if (value) {\n                                        const newMenu = {\n                                            ...layerMenu.Perception,\n                                            polygon: {\n                                                ...layerMenu.Perception.polygon,\n                                                currentVisible: true,\n                                            },\n                                            boundingbox: {\n                                                ...layerMenu.Perception.boundingbox,\n                                                currentVisible: false,\n                                            },\n                                        };\n                                        const newLayerMenu = {\n                                            ...layerMenu,\n                                            [currentMenu]: newMenu,\n                                        };\n                                        setSubMenu(() => newMenu);\n                                        setLayerMenu(() => newLayerMenu);\n                                        carviz.option.updateLayerOption(formatLayerParams(newLayerMenu), 'vehicle');\n                                        localStorage.setItem('pointCloudLayerMenuParams', JSON.stringify(newLayerMenu));\n                                    }\n                                }}\n                            />\n                        </span>\n                        <span className={classes['layer-menu-content-right-label']}>{t('polygon')}</span>\n                    </li>\n                    <li className={classes['layer-menu-content-right-li']}>\n                        <span className={classes['layer-menu-content-right-switch']}>\n                            <Radio\n                                checked={layerMenu.Perception.boundingbox.currentVisible}\n                                onChange={(e) => {\n                                    const value = e.target.checked;\n                                    if (value) {\n                                        const newMenu = {\n                                            ...layerMenu.Perception,\n                                            polygon: {\n                                                ...layerMenu.Perception.polygon,\n                                                currentVisible: false,\n                                            },\n                                            boundingbox: {\n                                                ...layerMenu.Perception.boundingbox,\n                                                currentVisible: true,\n                                            },\n                                        };\n                                        const newLayerMenu = {\n                                            ...layerMenu,\n                                            [currentMenu]: newMenu,\n                                        };\n                                        setSubMenu(() => newMenu);\n                                        setLayerMenu(() => newLayerMenu);\n                                        carviz.option.updateLayerOption(formatLayerParams(newLayerMenu), 'vehicle');\n                                        localStorage.setItem('pointCloudLayerMenuParams', JSON.stringify(newLayerMenu));\n                                    }\n                                }}\n                            />\n                        </span>\n                        <span className={classes['layer-menu-content-right-label']}>{t('boundingbox')}</span>\n                    </li>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef } from 'react';\nimport Carviz from '@dreamview/dreamview-carviz/src/index';\nimport { IconIcCoverageHover, Popover } from '@dreamview/dreamview-ui';\nimport { useTranslation } from 'react-i18next';\nimport shortUUID from 'short-uuid';\nimport { apollo } from '@dreamview/dreamview';\nimport { Subscription } from 'rxjs';\nimport useStyle from '../VehicleViz/useStyle';\nimport ViewMenu from '../VehicleViz/ViewMenu';\nimport ViewBtn from '../VehicleViz/ViewBtn';\nimport { usePanelContext } from '../base/store/PanelStore';\nimport { usePickHmiStore } from '../../../store/HmiStore';\nimport Panel from '../base/Panel';\nimport { StreamDataNames } from '../../../services/api/types';\nimport { isMac, isWin } from '../VehicleViz/util';\nimport LayerMenu from './LayerMenu';\nimport { getCurrentLayerParams, formatLayerParams } from './LayerMenu/params';\nimport useWebSocketServices from '../../../services/hooks/useWebSocketServices';\nimport CountedSubject from '../../../util/CountedSubject';\n\ntype IPointCloud = apollo.dreamview.IPointCloud;\n\nfunction Cloud() {\n    const [showPerception, setShowPerception] = useState(true);\n    const [curChannel, setCurChannel] = useState(null);\n    const panelContext = usePanelContext();\n    const [uid] = useState(shortUUID.generate);\n    const [hmi] = usePickHmiStore();\n    const { initSubscription, logger, data: subcribedData } = panelContext;\n    const { classes } = useStyle();\n    const [currentView, setCurrentView] = useState('D');\n    const [carviz] = useState(() => new Carviz(uid));\n    const { t } = useTranslation('viewMenu');\n    const [data, setData] = useState<IPointCloud>();\n\n    useEffect(() => {\n        initSubscription({\n            [StreamDataNames.POINT_CLOUD]: {\n                consumer: (pointCloudData) => {\n                    setData(pointCloudData);\n                },\n            },\n        });\n    }, []);\n\n    const { metadata, isMainConnected, streamApi } = useWebSocketServices();\n    const subscriptionRef = useRef<{\n        name: string;\n        subscription: Subscription;\n    }>(null);\n    const curMeta = useMemo(() => metadata.find((meata) => meata.dataName === 'obstacle'), [metadata, isMainConnected]);\n    const channels = useMemo(() => {\n        if (!curMeta) {\n            return [];\n        }\n\n        return curMeta.channels.map((channel) => ({\n            label: channel,\n            value: channel,\n        }));\n    }, [curMeta]);\n\n    const closeChannel = () => {\n        carviz?.updateData({\n            object: [],\n            autoDrivingCar: {},\n        });\n        carviz?.render();\n        if (subscriptionRef.current && subscriptionRef.current.subscription) {\n            subscriptionRef.current.subscription.unsubscribe();\n            subscriptionRef.current = null;\n        }\n    };\n\n    const updateChannel = (v: any) => {\n        closeChannel();\n        const newConnectedSubj: CountedSubject<unknown> = streamApi.subscribeToDataWithChannel('obstacle', v);\n        const newSubscription = newConnectedSubj.subscribe((val: any) => {\n            const socketData = {\n                object: val.obstacle || [],\n                autoDrivingCar: val.autoDrivingCar,\n            };\n            carviz?.updateData(socketData);\n            carviz?.render();\n        });\n\n        subscriptionRef.current = {\n            name: 'obstacle',\n            subscription: newSubscription,\n        };\n    };\n\n    useEffect(() => {\n        if (channels && channels.length !== 0 && streamApi) {\n            const firstChannel = channels[0];\n            setCurChannel(firstChannel.value);\n            if (showPerception) {\n                updateChannel(firstChannel.value);\n            }\n        }\n    }, [channels, streamApi]);\n\n    useEffect(() => {\n        carviz.init();\n        const curLayerMenuParams = getCurrentLayerParams();\n        localStorage.setItem('pointCloudLayerMenuParams', JSON.stringify(curLayerMenuParams));\n        carviz.option.updateLayerOption(formatLayerParams(curLayerMenuParams), 'pointCloud');\n\n        // 监听键盘事件\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            if (((e.metaKey && isMac()) || (e.ctrlKey && isWin())) && e.code === 'Equal') {\n                e.preventDefault();\n                carviz.view?.updateViewDistance(-10);\n            }\n            if (((e.metaKey && isMac()) || (e.ctrlKey && isWin())) && e.code === 'Minus') {\n                e.preventDefault();\n                carviz.view?.updateViewDistance(10);\n            }\n        });\n    }, []);\n\n    useEffect(\n        () => () => {\n            subscriptionRef.current?.subscription?.unsubscribe();\n        },\n        [],\n    );\n\n    useEffect(() => {\n        if (!data) return;\n        const socketData = {\n            pointCloud: data,\n        };\n        carviz?.updateData(socketData);\n        carviz.render();\n    }, [data]);\n\n    useEffect(() => {\n        carviz?.removeAll();\n    }, [hmi.currentRecordId]);\n\n    const layerMenuNode = (\n        <LayerMenu\n            curChannel={curChannel}\n            setCurChannel={setCurChannel}\n            carviz={carviz}\n            obstacleChannels={channels}\n            updateObstacleChannel={updateChannel}\n            closeChannel={closeChannel}\n            showPerception={showPerception}\n            setShowPerception={setShowPerception}\n        />\n    );\n    return (\n        <div className={classes['viz-container']}>\n            <div id={uid} className={classes['web-gl']} />\n            <div className={classes['viz-btn-container']}>\n                <Popover placement='leftTop' trigger='click' content={layerMenuNode}>\n                    <span className={classes['viz-btn-item']}>\n                        <IconIcCoverageHover />\n                    </span>\n                </Popover>\n                <Popover\n                    placement='leftTop'\n                    content={<ViewMenu carviz={carviz} setCurrentView={setCurrentView} />}\n                    trigger='click'\n                >\n                    <span className={classes['viz-btn-item']}>{currentView}</span>\n                </Popover>\n                <ViewBtn carviz={carviz} />\n            </div>\n        </div>\n    );\n}\n\nexport default function PointCloud(props: any) {\n    const Component = useMemo(\n        () => Panel(Cloud, props.panelId, [{ name: StreamDataNames.POINT_CLOUD, needChannel: true }]),\n        [],\n    );\n\n    return <Component {...props} />;\n}\n\nCloud.displayName = 'PointCloud';\n"],"names":["layerMenuParams","Perception","polygon","defaultVisible","currentVisible","vizKey","boundingbox","pointCloud","unknownMovable","vehicle","unknownStationary","pedestrian","unknown","bicycle","cipv","velocity","heading","id","distanceAndSpeed","laneMarker","lidarSensor","radarSensor","cameraSensor","v2x","Prediction","priority","majorPredictionLine","gaussianInfo","minorPredictionLine","interactiveTag","Routing","routingLine","Decision","mainDecision","obstacleDecision","Planning","planningCar","planningTrajectory","Position","localization","gps","shadow","Map","crosswalk","clearArea","junction","pncJunction","lane","road","signal","stopSign","yieldSign","speedBump","parkingSpace","parkingSpaceId","laneId","formatLayerParams","params","result","Object","keys","forEach","key","subLayerMenu","subKey","subParams","getCurrentLayerParams","localStorageLayerMenuParams","localStorage","getItem","JSON","parse","LayerMenu","props","classes","useStyle","carviz","obstacleChannels","updateObstacleChannel","closeChannel","showPerception","setShowPerception","curChannel","setCurChannel","t","useTranslation","curLayerMenuParams","setItem","stringify","option","updateLayerOption","_useState2","_slicedToArray","useState","layerMenu","setLayerMenu","menu","currentMenu","setSubMenu","React","className","style","display","marginTop","Checkbox","checked","defaultChecked","onChange","e","target","length","ChannelSelect","value","options","v","Radio","newMenu","_objectSpread","newLayerMenu","_defineProperty","Cloud","_useState4","panelContext","usePanelContext","uid","shortUUID","hmi","usePickHmiStore","initSubscription","logger","data","_useState8","currentView","setCurrentView","Carviz","_useState12","setData","useEffect","StreamDataNames","POINT_CLOUD","consumer","pointCloudData","_useWebSocketServices","useWebSocketServices","metadata","isMainConnected","streamApi","subscriptionRef","useRef","curMeta","useMemo","find","meata","dataName","channels","map","channel","label","updateData","object","autoDrivingCar","render","current","subscription","unsubscribe","updateChannel","newSubscription","subscribeToDataWithChannel","subscribe","val","socketData","obstacle","name","firstChannel","init","document","addEventListener","_carviz$view","_carviz$view2","metaKey","isMac","ctrlKey","isWin","code","preventDefault","view","updateViewDistance","_subscriptionRef$curr","removeAll","currentRecordId","layerMenuNode","Popover","placement","trigger","content","IconIcCoverageHover","ViewMenu","ViewBtn","PointCloud","Component","Panel","panelId","needChannel","displayName"],"sourceRoot":""}