{"version":3,"file":"629.bc9d469f8f7a9d7c3d0f.js","mappings":"8fAOO,IAAMA,GAAYC,EAAAA,EAAAA,aAAyD,SAACC,EAAOC,GACtF,IAAQC,EAAuBF,EAAvBE,UAAcC,E,kXAAIC,CAAKJ,EAAKK,GAC9BC,GAAYC,EAAAA,EAAAA,GAAa,cACzBC,EAAUC,IAAWH,EAAWJ,GAEtC,OACIQ,EAAAA,cAAA,MAAAC,EAAA,CAAKV,IAAKA,EAAKC,UAAWM,GAAaL,GAClCH,EAAMY,SAGnB,IAEAd,EAAUe,YAAc,Y,8PCXT,SAASC,EAAiBd,GACrC,IAAQQ,GCNIO,EAAAA,EAAAA,KAAa,SAACC,GAAK,MAAM,CACjC,+BAAgC,CAC5BC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,OACRC,MAAO,OACPC,WAAY,qBACZC,SAAU,OACVC,MAAO,UACPC,gBAAiB,WAErBC,MAAO,CACHF,MAAOT,EAAMY,OAAOC,OAAOF,OAE/BG,KAAM,CACFL,MAAOT,EAAMY,OAAOC,OAAOE,QAE/BC,KAAM,CACFP,MAAOT,EAAMY,OAAOC,OAAOG,MAElC,GACMC,GDjBCzB,QAER,OACIE,EAAAA,cAAA,MAAAC,EAAA,CAAKT,UAAWM,EAAQ,iCAAqCR,GACzDU,EAAAA,cAAA,OACIwB,MAAO,CACHZ,MAAO,IACPD,OAAQ,KAEZc,IAAKC,EAAQ,OACbC,IAAI,YAER3B,EAAAA,cAAA,WAAMV,EAAMsC,MAGxB,C,6CEPA,SAASC,EAAmBC,GACxB,OAAO,SAACC,EAA4BC,EAAgBC,GAChD,IAAIC,EAAgB,IAAIC,MAAeH,EAAKI,QAAQC,MAAK,GACzDL,EAAKM,SAAQ,SAACC,EAAKC,GACfV,EACKW,MACGC,EAAAA,EAAAA,IAAO,SAACC,GACJ,GAAIA,aAAiBC,cAAe,KAAAC,EAC1BC,EAAWP,EAAIQ,cACfC,EAAoB,QAAZH,EAAGF,EAAMJ,WAAG,IAAAM,OAAA,EAATA,EAAWE,cAEtBE,EAAeC,YAAW,WAC5BhB,EAAcM,IAAS,EACvBW,aAAaF,EACjB,GAAG,KAEH,OAAIhB,EACOU,EAAMV,IAAkBe,IAAaF,EAGzCE,IAAaF,CACxB,CAEA,OAAO,CACX,KAEHM,WAAU,SAACT,GACRT,EAAcM,IAAS,EACnBN,EAAcmB,QAAO,SAACC,EAAMC,GAAG,OAAKD,GAAQC,CAAG,IAAE,IACjDxB,EAAGY,GACHT,EAAgBA,EAAcG,MAAK,IAEnCM,EAAMa,gBAEd,GACR,GACJ,CACJ,CAEe,SAASC,EAAYnE,GAChC,IAAAoE,EAA2DpE,EAAnDqE,OAAAA,OAAM,IAAAD,GAAQA,EAAEE,EAAmCtE,EAAnCsE,gBAAiBC,EAAkBvE,EAAlBuE,cACnCC,GAAaC,EAAAA,EAAAA,UACbC,GAAYD,EAAAA,EAAAA,QAAgBJ,GA4ClC,OA1CAM,EAAAA,EAAAA,YAAU,WACND,EAAUE,QAAUP,CACxB,GAAG,CAACA,KAEJM,EAAAA,EAAAA,YAAU,WACN,GAAIL,EAEA,IADA,IAAMO,EAAMP,EAAgBxB,OAAOgC,EAAA,WAE/B,IACMC,EAAaxC,GADEyC,EAAAA,EAAAA,GAAUC,SAAU,YAEnCC,EAAiBZ,EAAgBa,GACvCJ,GACI,SAAC1B,GACOqB,EAAUE,UACVM,SAAAA,EAAgBE,QAAQ/B,GAEhC,GACA6B,aAAc,EAAdA,EAAgBxC,KAChBwC,aAAc,EAAdA,EAAgBvC,cAExB,EAbSwC,EAAI,EAAGA,EAAIN,EAAKM,GAAK,EAACL,IAgBnC,GAAIP,EAEA,IADA,IAAMM,EAAMN,EAAczB,OAAOuC,EAAA,WAE7B,IACMC,EAAW/C,GADEyC,EAAAA,EAAAA,GAAUC,SAAU,UAEjCM,EAAehB,EAAcY,GACnCG,GACI,SAACjC,GACOqB,EAAUE,UACVW,SAAAA,EAAcH,QAAQ/B,GAE9B,GACAkC,aAAY,EAAZA,EAAc7C,KACd6C,aAAY,EAAZA,EAAc5C,cAEtB,EAbSwC,EAAI,EAAGA,EAAIN,EAAKM,GAAK,EAACE,GAevC,GAAG,CAACf,EAAiBC,IAGjB7D,EAAAA,cAAA,OACIT,IAAKuE,EACLtC,MAAO,CACHjB,QAAS,SAIzB,C,0sEC/Ee,SAASuE,EACpBC,EACAC,EACAC,EACAC,GAEA,SAASC,EAAa7F,GAClB,IAAA8F,GAAiDC,EAAAA,EAAAA,KAAzCC,EAAeF,EAAfE,gBAAiBC,EAASH,EAATG,UAAWC,EAAQJ,EAARI,SAC5BC,GAAiBC,EAAAA,EAAAA,KAAjBD,aACAE,GAAkBC,EAAAA,EAAAA,YAAWC,EAAAA,IAA7BF,cACAG,GAAsEF,EAAAA,EAAAA,YAAWG,EAAAA,IAAjFD,oBACuDE,EAAAC,GAAnBC,EAAAA,EAAAA,KAAmB,GAAxDC,EAAcH,EAAA,GAAEI,EAAiBJ,EAAA,GAChCK,GAAMC,EAAAA,EAAAA,IAAe,UAArBD,EAC0DE,EAAAN,GAAvBO,EAAAA,EAAAA,UAAStB,GAAc,GAA3DuB,EAAcF,EAAA,GAAEG,EAAgBH,EAAA,GACyBI,EAAAV,GAAtBW,EAAAA,EAAAA,GAAc5B,GAAQ,GAAzD6B,EAAeF,EAAA,GAAEG,EAAcH,EAAA,GACmBI,EAAAd,GAAfO,EAAAA,EAAAA,WAAS,GAAM,GAAlDQ,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACOG,EAAAjB,GAAfO,EAAAA,EAAAA,WAAS,GAAM,GAAtCW,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC+CG,EAAApB,GAAjCO,EAAAA,EAAAA,UAA8B,CAAC,GAAE,GAAlEc,EAAYD,EAAA,GACbE,GAD8BF,EAAA,IACPtD,EAAAA,EAAAA,QAK3B,KACIyD,GAAmBzD,EAAAA,EAAAA,QAKvB,IAEI0D,GAAyB1D,EAAAA,EAAAA,UACzB2D,IAAoB3D,EAAAA,EAAAA,UAC8C4D,GAAA1B,GAAzBO,EAAAA,EAAAA,YAAyB,GAAjE5C,GAAe+D,GAAA,GAAEC,GAAmBD,GAAA,GACyBE,GAAA5B,GAAzBO,EAAAA,EAAAA,YAAyB,GAA7D3C,GAAagE,GAAA,GAAEC,GAAiBD,GAAA,GACjCE,GC/DC,SAA6B/C,GACxC,IACQgD,GADcC,EAAAA,EAAAA,MACdD,cACFE,GAAwBnE,EAAAA,EAAAA,UACxBgE,GAAgBI,EAAAA,EAAAA,cAAY,SAACC,GAC3BF,EAAsBhE,SACtBgE,EAAsBhE,QAAQmE,QAAQD,EAE9C,GAAG,IAMH,OAJAnE,EAAAA,EAAAA,YAAU,WACNiE,EAAsBhE,QAAU8D,EAAcM,kBAAkB,kBAADC,OAAmBvD,GACtF,GAAG,CAACA,IAEG+C,CACX,CDgD8BS,CAAoBxD,GAEpCyD,IAAQC,EAAAA,EAAAA,UAAQ,kBAAMjD,EAAakD,IAAI3D,EAAQ,GAAE,CAACA,EAASS,IAC3DmD,IAAaF,EAAAA,EAAAA,UAAQ,eAAAG,EAAAC,EAAA,OAAoD,QAApDD,EAAM1C,SAAgC,QAAlB2C,EAAd3C,EAAgB4C,wBAAgB,IAAAD,OAAA,EAAhCA,EAAkCE,IAAIhE,UAAQ,IAAA6D,GAAAA,CAAS,GAAE,CAAC1C,IAErF8C,IAAmBP,EAAAA,EAAAA,UACrB,kBAAM,SAACQ,GACHzB,EAAuBvD,QAAUgF,CACrC,CAAC,GACD,IAGEC,IAAST,EAAAA,EAAAA,UAAQ,kBAAMU,EAAAA,EAAOC,YAAYrE,EAAQ,GAAE,CAACA,IAE9CsE,IAAiBC,EAAAA,EAAAA,IAAkB,CAC5CC,SAAU,SAAC5I,EAAeD,GAClB+G,GAAkBxD,SAClBwD,GAAkBxD,QAAQtD,EAAOD,EAEzC,IALIpB,IAQFkK,IAAgBtB,EAAAA,EAAAA,cAAY,SAACqB,GAC/B9B,GAAkBxD,QAAUsF,CAChC,GAAG,IAEGE,IAAavB,EAAAA,EAAAA,cACf,SAACwB,GACG,IAAMC,EAAOjE,EAAckE,UACrBC,EAAUhE,EAAoBiE,UAC9BC,GAAQC,EAAAA,EAAAA,IAAiBxB,cAAK,EAALA,GAAOyB,MACtCvE,EAAcwE,YAAYL,EAAS,CAC/BH,UAAAA,EACAS,OAAQJ,EACRK,OAAOC,EAAAA,EAAAA,IAA6BV,EAAME,IAElD,GACA,CAAChE,EAAqBH,EAAe8C,cAAK,EAALA,GAAOyB,OAG1CK,IAAapC,EAAAA,EAAAA,cAAY,WAC3B,IAAM2B,EAAUhE,EAAoBiE,UACpCpE,EAAc6E,OAAOV,EACzB,GAAG,CAACnE,EAAeG,IAEb2E,IAAiBtC,EAAAA,EAAAA,cACnB,kBAAM,SAACuC,GACHhE,EAAgBiE,EAAAA,EAAC,CAAC,EACXD,GAAW,IACd1F,QAAAA,IAER,CAAC,GACD,CAACA,IAGC4F,IAAwDzC,EAAAA,EAAAA,cAC1D,SAACxF,GACQiG,IACDxC,GAAkByE,EAAAA,EAAAA,GAAmB7F,GAE7C,GACA,CAAC4D,GAAYxC,IAGX0E,IAAiB3C,EAAAA,EAAAA,cACnB,SAACe,GACQ/B,IAAW+B,IAAQ6B,EAAAA,EAAAA,SAAQ7B,IAC5B9B,GAAW,EAEnB,GACA,CAACD,IAGC6D,IAAkB7C,EAAAA,EAAAA,cACpB,SAAC8C,GACG,IAAIC,EAgBJ,OAfID,SAAAA,EAAgBE,YACZF,SAAAA,EAAgBG,MAAhBH,MAAwBA,GAAAA,EAAgBI,UAEpCH,EAD4B,aAA5BD,aAAc,EAAdA,EAAgBI,SACG9F,EAAU+F,gCAAgCL,aAAc,EAAdA,EAAgBG,MAE1D7F,EAAUgG,2BACzBN,aAAc,EAAdA,EAAgBG,KAChBH,aAAc,EAAdA,EAAgBI,UAK5BH,EAAmB3F,EAAUiG,gBAAgBP,aAAc,EAAdA,EAAgBG,MAG1DF,CACX,GACA,CAAC3F,IAGCkG,IAAkBtD,EAAAA,EAAAA,cAAY,SAACuD,GAAmB,GAAG,IAErDC,IAAaxD,EAAAA,EAAAA,cACf,SAAC8C,GACG,GAAI3F,EAAiB,CACjB,IAAMsG,EAAcrE,EAAqBrD,QACnC2H,EAAqBD,EAAYE,WACnC,SAACC,GAAU,OAAKA,EAAWX,OAASH,EAAeG,IAAI,IAG3D,IAA4B,IAAxBS,EAA2B,CAE3B,IAAMX,EAA4CF,GAAgBC,GAClE,GAAIC,EAAkB,CAClB,IAAMc,EAAed,EAAiB9H,WAAU,SAAC8F,GAGmC,IAAA+C,EAAAC,EAFhFpB,GAAe5B,GAEXzB,EAAuBvD,WAAY6G,EAAAA,EAAAA,SAAQtD,EAAuBvD,WAED,QADnD+H,EACyC,QADzCC,EACVzE,EAAuBvD,QAAQ+G,EAAeG,aAAK,IAAAc,OAAA,EAAnDA,EAAqDC,gBAAQ,IAAAF,EAAAA,EAC7DR,IACKvC,EAEjB,IAEA0C,EAAYQ,KAAK,CACbhB,KAAMH,EAAeG,KACrBiB,iBAAkBnB,IAGtB1D,EAAiBtD,QAAQkI,KAAK,CAC1BhB,KAAMH,EAAeG,KACrBY,aAAAA,GAER,CACJ,KAAO,CAEH,IAAMM,EAAoB9E,EAAiBtD,QAAQ4H,WAC/C,SAACE,GAAY,OAAKA,EAAaZ,OAASH,EAAeG,IAAI,IAEvC5D,EAAiBtD,QAAQoI,GAEjCN,aAAaO,cAE7B,IAAMrB,EAA4CF,GAAgBC,GAClE,GAAIC,EAAkB,CAClB,IAAMsB,EAAkBtB,EAAiB9H,WAAU,SAAC8F,GAGgC,IAAAuD,EAAAC,EAFhF5B,GAAe5B,GAEXzB,EAAuBvD,WAAY6G,EAAAA,EAAAA,SAAQtD,EAAuBvD,WAED,QADnDuI,EACyC,QADzCC,EACVjF,EAAuBvD,QAAQ+G,EAAeG,aAAK,IAAAsB,OAAA,EAAnDA,EAAqDP,gBAAQ,IAAAM,EAAAA,EAC7DhB,IACKvC,EAEjB,IAGA0C,EAAYC,GAAsB,CAC9BT,KAAMH,EAAeG,KACrBiB,iBAAkBnB,GAGtB1D,EAAiBtD,QAAQoI,GAAqB,CAC1ClB,KAAMH,EAAeG,KACrBY,aAAcQ,EAEtB,CACJ,CACJ,CACJ,GACA,CAAClH,IAGCqH,IAAmBxE,EAAAA,EAAAA,cACrB,SAACiD,GAKG,IAA4B,IAJD7D,EAAqBrD,QAAQ4H,WACpD,SAACC,GAAU,OAAKA,EAAWX,OAASA,CAAI,IAGb,CAC3B,IAAMkB,EAAoB9E,EAAiBtD,QAAQ4H,WAC/C,SAACE,GAAY,OAAKA,EAAaZ,OAASA,CAAI,IAExB5D,EAAiBtD,QAAQoI,GAEjCN,aAAaO,cAE7B/E,EAAiBtD,QAAUsD,EAAiBtD,QAAQxB,QAChD,SAACkK,GAAgB,OAAKA,EAAiBxB,OAASA,CAAI,IAExD7D,EAAqBrD,QAAUqD,EAAqBrD,QAAQxB,QACxD,SAACmK,GAAoB,OAAKA,EAAqBzB,OAASA,CAAI,GAEpE,CACJ,GACA,CAAC9F,IAGCwH,IAAqB3E,EAAAA,EAAAA,cAAY,SAAC4E,GACpCnF,GAAoBmF,EACxB,GAAG,IAEGC,IAAmB7E,EAAAA,EAAAA,cAAY,SAAC4E,GAClCjF,GAAkBiF,EACtB,GAAG,IAEGE,IAAoBvE,EAAAA,EAAAA,UACtB,kBACI1I,EAAAA,cAACI,EAAgB,CACboB,MAAO,CACHjB,QAASyG,GAAiBG,EAAU,OAAS,QAEjDvF,KAAMyE,EAAE,eACV,GAEN,CAACW,EAAeG,KAGpBlD,EAAAA,EAAAA,YAAU,WACN,IAAKqB,GAAmBE,EAASpD,QAAU,EAAG,OAAO8K,EAAAA,GACrD,GAAIjI,EAAe,CAGf,IAFA,IAAMd,EAAMc,aAAa,EAAbA,EAAe7C,OAC3BgC,EAAA,WAEI,IAAM+I,EAAalI,EAAcR,GAC3B2G,EAAO+B,aAAU,EAAVA,EAAY/B,KAGzB,IADgB5F,EAAS4H,MAAK,SAACC,GAAI,OAAKA,EAAKC,WAAalC,CAAI,IAE1D,SAIJ,IAAMmC,EAAyCvC,GAAgBmC,GAE3DI,GACAhG,EAAqBrD,QAAQkI,KAAK,CAC9BhB,KAAAA,EACAiB,iBAAkBkB,GAG9B,EAlBS9I,EAAI,EAAGA,EAAIN,EAAKM,GAAK,EAACL,IAmB1B4C,GACDC,GAAiB,GAGrB,IACkDuG,EADlDC,E,+lBAAAC,CACsBnG,EAAqBrD,SAAO,QAAAS,EAAA,WAAE,IAAzCgJ,EAAOH,EAAAI,MACR5B,EAAe2B,EAAQtB,iBAAiBjJ,WAAU,SAAC8F,GAG2B,IAAA2E,EAFhF/C,GAAe5B,GAEXzB,EAAuBvD,WAAY6G,EAAAA,EAAAA,SAAQtD,EAAuBvD,WACI,QAAxD2J,EAAGpG,EAAuBvD,QAAQyJ,EAAQvC,MAAMe,gBAAQ,IAAA0B,EAAAA,EAAIpC,IACjEvC,EAEjB,IAEA1B,EAAiBtD,QAAQkI,KAAK,CAC1BhB,KAAMuC,EAAQvC,KACdY,aAAAA,GAER,EAdA,IAAAyB,EAAAK,MAAAN,EAAAC,EAAAM,KAAAC,MAAArJ,GAcC,OAAAsJ,GAAAR,EAAAS,EAAAD,EAAA,SAAAR,EAAAU,GAAA,CACL,CAEA,OAAO,WACH3G,EAAiBtD,QAAQ5B,SAAQ,SAAC0J,GAC9BA,EAAaA,aAAaO,aAC9B,GACJ,CACJ,GAAG,CAACjH,IE1UG,SAAgCN,EAAiB2G,GAC5D,IACQ3D,GADcC,EAAAA,EAAAA,MACdD,cACFoG,GAAWrK,EAAAA,EAAAA,WAEjBE,EAAAA,EAAAA,YAAU,WACNmK,EAASlK,QAAU8D,EAAcM,kBAAkB,kBAADC,OAAmBvD,IACjEoJ,EAASlK,SACTkK,EAASlK,QAAQd,UAAUuI,EAEnC,GAAG,CAACA,KAEJ1H,EAAAA,EAAAA,YACI,kBAAM,WACEmK,EAASlK,SACTkK,EAASlK,QAAQmK,iBAEzB,CAAC,GACD,IAGGD,EAASlK,OACpB,CFsTQoK,CAAuBtJ,EAAS2G,IG5UzB,SAA0B3G,EAAiB+C,GACtD,IACQC,GADcC,EAAAA,EAAAA,MACdD,cACFoG,GAAWrK,EAAAA,EAAAA,WAEjBE,EAAAA,EAAAA,YAAU,WACNmK,EAASlK,QAAU8D,EAAcM,kBAAkB,kBAADC,OAAmBvD,IACjEoJ,EAASlK,SACTkK,EAASlK,QAAQd,UAAU2E,EAEnC,GAAG,CAACA,KAEJ9D,EAAAA,EAAAA,YACI,kBAAM,WACEmK,EAASlK,SACTkK,EAASlK,QAAQmK,iBAEzB,CAAC,GACD,IAGGD,EAASlK,OACpB,CHuTQqK,CAAiBvJ,EAAS2G,IAE1B,IAAMnK,IAAQkH,EAAAA,EAAAA,UACV,iBAAO,CACHnI,QAASyG,GAAiBG,EAAU,QAAU,OACjD,GACD,CAACH,EAAeG,IAGdqH,IAAe9F,EAAAA,EAAAA,UACjB,iBAAO,CACH1D,QAAAA,EACAiE,iBAAAA,GACAE,OAAAA,GACAsF,SAAUhI,EACViD,WAAAA,GACAa,WAAAA,GACAE,eAAAA,GACA5D,gBAAAA,EACAC,eAAAA,EACA2C,cAAAA,GACAiC,KAAMpE,EACNqE,WAAAA,GACA5D,cAAAA,GACA4E,iBAAAA,GACAG,mBAAAA,GACAE,iBAAAA,GACH,GACD,CACI7D,GACApB,GACAkB,GACAxC,EACAiD,GACAa,GACAE,GACA5D,EACAC,EACA2C,GACAnC,EACAqE,GACAgB,GACAG,GACAE,KAIR,OACIhN,EAAAA,cAAC0O,EAAAA,EAAaC,SAAQ,CAACf,MAAOY,IAC1BxO,EAAAA,cAACyD,EAAW,CAACE,OAAQiF,GAAYhF,gBAAiBA,GAAiBC,cAAeA,KAClF7D,EAAAA,cAACZ,EAAS,CAACoC,MAAOA,GAAOoN,QAAShE,GAAcrL,IAAK+J,IACjDtJ,EAAAA,cAAC+E,EAAmBzF,IAEvB2N,GAGb,CAEA,OAAO4B,OAAOC,OAAO9O,EAAAA,KAAWmF,GAAe,CAC3ChF,YAAa4E,EAAe5E,aAAe4E,EAAeqG,MAElE,C,0DI/WasD,GAAeK,EAAAA,EAAAA,oBAAyCC,GAE9D,SAASC,IACZ,OAAOrJ,EAAAA,EAAAA,YAAW8I,EACtB,C","sources":["webpack:///../../../dreamview-core/src/components/panels/base/PanelRoot/index.tsx","webpack:///../../../dreamview-core/src/components/panels/base/EmptyPlaceHolder/index.tsx","webpack:///../../../dreamview-core/src/components/panels/base/EmptyPlaceHolder/useStyle.ts","webpack:///../../../dreamview-core/src/components/panels/base/KeyListener/index.tsx","webpack:///../../../dreamview-core/src/components/panels/base/Panel.tsx","webpack:///../../../dreamview-core/src/hooks/useGetUpdateChannel.ts","webpack:///../../../dreamview-core/src/hooks/useNotifyInitialChanel.ts","webpack:///../../../dreamview-core/src/hooks/useUpdateChannel.ts","webpack:///../../../dreamview-core/src/components/panels/base/store/PanelStore/index.tsx"],"sourcesContent":["import { getPrefixCls } from '@dreamview/dreamview-ui/src/tools/prefixCls/prefixCls';\nimport React, { HTMLAttributes, PropsWithChildren, forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.less';\n\ntype PanelRoot = HTMLAttributes<HTMLDivElement>;\n\nexport const PanelRoot = forwardRef<HTMLDivElement, PropsWithChildren<PanelRoot>>((props, ref): JSX.Element => {\n    const { className, ...rest } = props;\n    const prefixCls = getPrefixCls('panel-root');\n    const classes = classNames(prefixCls, className);\n\n    return (\n        <div ref={ref} className={classes} {...rest}>\n            {props.children}\n        </div>\n    );\n});\n\nPanelRoot.displayName = 'PanelRoot';\n","/* eslint-disable global-require */\nimport React, { HTMLAttributes } from 'react';\nimport useStyle from './useStyle';\n\nexport type NoDataPlaceHolderProps = {\n    text: string;\n} & HTMLAttributes<HTMLDivElement>;\n\nexport default function EmptyPlaceHolder(props: NoDataPlaceHolderProps) {\n    const { classes } = useStyle();\n\n    return (\n        <div className={classes['dreamview-nodata-placeholder']} {...props}>\n            <img\n                style={{\n                    width: 160,\n                    height: 100,\n                }}\n                src={require('../imgs/ic_empty_page_no_data@3x.png')}\n                alt='no data'\n            />\n            <div>{props.text}</div>\n        </div>\n    );\n}\n","import { useMakeStyle } from '@dreamview/dreamview-theme';\n\nexport default function useStyle() {\n    const hoc = useMakeStyle((theme) => ({\n        'dreamview-nodata-placeholder': {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            height: '100%',\n            width: '100%',\n            fontFamily: 'PingFangSC-Regular',\n            fontSize: '14px',\n            color: '#5D6573',\n            backgroundColor: '#0F1014',\n        },\n        error: {\n            color: theme.tokens.colors.error,\n        },\n        info: {\n            color: theme.tokens.colors.brand2,\n        },\n        warn: {\n            color: theme.tokens.colors.warn,\n        },\n    }));\n    return hoc();\n}\n","import React, { useEffect, useRef } from 'react';\nimport { Observable, filter, fromEvent } from 'rxjs';\nimport { FunctionalKey } from '../../../../store/EventHandlersStore';\n\nexport type KeyHandlers = {\n    keys: string[];\n    functionalKey?: FunctionalKey;\n    handler: (event: KeyboardEvent) => void | boolean | undefined;\n};\n\ntype KeyListenerProps = {\n    active?: boolean;\n    gloabl?: boolean;\n    keyDownHandlers?: KeyHandlers[];\n    keyUpHandlers?: KeyHandlers[];\n};\n\nfunction getMultiPressedKey(observableEvent: Observable<Event>) {\n    return (cb: (event: Event) => void, keys: string[], functionalKey?: FunctionalKey) => {\n        let isPressedKeys = new Array<boolean>(keys.length).fill(false);\n        keys.forEach((key, index) => {\n            observableEvent\n                .pipe(\n                    filter((event) => {\n                        if (event instanceof KeyboardEvent) {\n                            const lowerKey = key.toLowerCase();\n                            const eventKey = event.key?.toLowerCase();\n\n                            const clearerTimer = setTimeout(() => {\n                                isPressedKeys[index] = false;\n                                clearTimeout(clearerTimer);\n                            }, 200);\n\n                            if (functionalKey) {\n                                return event[functionalKey] && eventKey === lowerKey;\n                            }\n\n                            return eventKey === lowerKey;\n                        }\n\n                        return false;\n                    }),\n                )\n                .subscribe((event) => {\n                    isPressedKeys[index] = true;\n                    if (isPressedKeys.reduce((prev, cur) => prev && cur, true)) {\n                        cb(event);\n                        isPressedKeys = isPressedKeys.fill(false);\n                    } else {\n                        event.preventDefault();\n                    }\n                });\n        });\n    };\n}\n\nexport default function KeyListener(props: KeyListenerProps) {\n    const { active = false, keyDownHandlers, keyUpHandlers } = props;\n    const elementRef = useRef<HTMLDivElement>();\n    const activeRef = useRef<boolean>(active);\n\n    useEffect(() => {\n        activeRef.current = active;\n    }, [active]);\n\n    useEffect(() => {\n        if (keyDownHandlers) {\n            const len = keyDownHandlers.length;\n            for (let i = 0; i < len; i += 1) {\n                const keyDownEvent = fromEvent(document, 'keydown');\n                const setKeyDown = getMultiPressedKey(keyDownEvent);\n                const keyDownHandler = keyDownHandlers[i];\n                setKeyDown(\n                    (event) => {\n                        if (activeRef.current) {\n                            keyDownHandler?.handler(event as KeyboardEvent);\n                        }\n                    },\n                    keyDownHandler?.keys,\n                    keyDownHandler?.functionalKey,\n                );\n            }\n        }\n\n        if (keyUpHandlers) {\n            const len = keyUpHandlers.length;\n            for (let i = 0; i < len; i += 1) {\n                const keyUpEvent = fromEvent(document, 'keyup');\n                const setKeyUp = getMultiPressedKey(keyUpEvent);\n                const keyUpHandler = keyUpHandlers[i];\n                setKeyUp(\n                    (event) => {\n                        if (activeRef.current) {\n                            keyUpHandler?.handler(event as KeyboardEvent);\n                        }\n                    },\n                    keyUpHandler?.keys,\n                    keyUpHandler?.functionalKey,\n                );\n            }\n        }\n    }, [keyDownHandlers, keyUpHandlers]);\n\n    return (\n        <div\n            ref={elementRef}\n            style={{\n                display: 'none',\n            }}\n        />\n    );\n}\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport Logger from '@dreamview/log';\nimport {\n    MosaicContext,\n    MosaicDirection,\n    MosaicWindowActions,\n    MosaicWindowContext,\n    getAndAssertNodeAtPathExists,\n} from 'react-mosaic-component';\nimport { useResizeDetector } from 'react-resize-detector';\nimport { OnResizeCallback } from 'react-resize-detector/build/types/types';\nimport shortUUID from 'short-uuid';\nimport { Observable, Subscription, combineLatest, of, withLatestFrom, zip } from 'rxjs';\nimport { isEmpty } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DataConsumer, InitSubscriptionMap, PanelContext, PanelMetaData } from './store/PanelStore';\nimport { usePanelCatalogContext } from '../../../store/PanelCatalogStore';\nimport { genereatePanelId } from '../../../util/layout';\nimport { noop } from '../../../util/similarFunctions';\nimport useWebSocketServices from '../../../services/hooks/useWebSocketServices';\nimport useFullScreen from '../../../hooks/useFullScreen';\nimport { PanelRoot } from './PanelRoot';\nimport useUpdateChannel from '../../../hooks/useUpdateChannel';\nimport EmptyPlaceHolder from './EmptyPlaceHolder';\nimport CountedSubject from '../../../util/CountedSubject';\nimport { SubscribeInfo } from '../type/RenderToolBar';\nimport useNotifyInitialChanel from '../../../hooks/useNotifyInitialChanel';\nimport useGetUpdateChannel from '../../../hooks/useGetUpdateChannel';\nimport { usePanelInfoStore } from '../../../store/PanelInfoStore';\nimport { addSelectedPanelId, deleteSelectedPanelId } from '../../../store/PanelInfoStore/actions';\nimport KeyListener, { KeyHandlers } from './KeyListener';\n\nexport default function Panel(\n    PanelComponent: React.ComponentType & { displayName: string },\n    panelId: string,\n    subscribeInfo?: SubscribeInfo[],\n    panelMetaData?: PanelMetaData,\n) {\n    function PanelWrapper(props: any) {\n        const { isMainConnected, streamApi, metadata } = useWebSocketServices();\n        const { panelCatalog } = usePanelCatalogContext();\n        const { mosaicActions } = useContext(MosaicContext);\n        const { mosaicWindowActions }: { mosaicWindowActions: MosaicWindowActions } = useContext(MosaicWindowContext);\n        const [panelInfoState, panelInfoDispatch] = usePanelInfoStore();\n        const { t } = useTranslation('panels');\n        const [_panelMetaData, setPanelMetaData] = useState(panelMetaData);\n        const [enterFullScreen, exitFullScreen] = useFullScreen(panelId);\n        const [hasSubscribed, setHasSubscribed] = useState(false);\n        const [hasData, setHasData] = useState(false);\n        const [combinedData, setCombinedData] = useState<Record<string, any>>({});\n        const connectedSubjectsRef = useRef<\n            {\n                name: string;\n                connectedSubject: CountedSubject<unknown>;\n            }[]\n        >([]);\n        const subscriptionsRef = useRef<\n            {\n                name: string;\n                subscription: Subscription;\n            }[]\n        >([]);\n\n        const initSubscriptionMapRef = useRef<InitSubscriptionMap>();\n        const resizeCallBackRef = useRef<OnResizeCallback>();\n        const [keyDownHandlers, _setKeyDownHandlers] = useState<KeyHandlers[]>();\n        const [keyUpHandlers, _setKeyUpHandlers] = useState<KeyHandlers[]>();\n        const updateChannel = useGetUpdateChannel(panelId);\n\n        const panel = useMemo(() => panelCatalog.get(panelId), [panelId, panelCatalog]);\n        const isSelected = useMemo(() => panelInfoState?.selectedPanelIds?.has(panelId) ?? false, [panelInfoState]);\n\n        const initSubscription = useMemo(\n            () => (val: InitSubscriptionMap) => {\n                initSubscriptionMapRef.current = val;\n            },\n            [],\n        );\n\n        const logger = useMemo(() => Logger.getInstance(panelId), [panelId]);\n\n        const { ref: panelRootRef } = useResizeDetector({\n            onResize: (width: number, height: number) => {\n                if (resizeCallBackRef.current) {\n                    resizeCallBackRef.current(width, height);\n                }\n            },\n        });\n\n        const onPanelResize = useCallback((onResize: OnResizeCallback) => {\n            resizeCallBackRef.current = onResize;\n        }, []);\n\n        const splitPanel = useCallback(\n            (direction: MosaicDirection) => {\n                const root = mosaicActions.getRoot();\n                const ownPath = mosaicWindowActions.getPath();\n                const newId = genereatePanelId(panel?.type);\n                mosaicActions.replaceWith(ownPath, {\n                    direction,\n                    second: newId,\n                    first: getAndAssertNodeAtPathExists(root, ownPath),\n                });\n            },\n            [mosaicWindowActions, mosaicActions, panel?.type],\n        );\n\n        const closePanel = useCallback(() => {\n            const ownPath = mosaicWindowActions.getPath();\n            mosaicActions.remove(ownPath);\n        }, [mosaicActions, mosaicWindowActions]);\n\n        const updateMetaData = useCallback(\n            () => (newMetaData: PanelMetaData) => {\n                setPanelMetaData({\n                    ...newMetaData,\n                    panelId,\n                });\n            },\n            [panelId],\n        );\n\n        const onPanleClick: React.MouseEventHandler<HTMLDivElement> = useCallback(\n            (event) => {\n                if (!isSelected) {\n                    panelInfoDispatch(addSelectedPanelId(panelId));\n                }\n            },\n            [isSelected, panelInfoDispatch],\n        );\n\n        const checkDataEmpty = useCallback(\n            (val: unknown) => {\n                if (!hasData && val && !isEmpty(val)) {\n                    setHasData(true);\n                }\n            },\n            [hasData],\n        );\n\n        const handleSubscribe = useCallback(\n            (newChannelInfo: SubscribeInfo) => {\n                let newConnectedSubj: CountedSubject<unknown>;\n                if (newChannelInfo?.needChannel) {\n                    if (newChannelInfo?.name && newChannelInfo?.channel) {\n                        if (newChannelInfo?.channel === 'default') {\n                            newConnectedSubj = streamApi.subscribeToDataWithChannelFuzzy(newChannelInfo?.name);\n                        } else {\n                            newConnectedSubj = streamApi.subscribeToDataWithChannel(\n                                newChannelInfo?.name,\n                                newChannelInfo?.channel,\n                            );\n                        }\n                    }\n                } else {\n                    newConnectedSubj = streamApi.subscribeToData(newChannelInfo?.name);\n                }\n\n                return newConnectedSubj;\n            },\n            [streamApi],\n        );\n\n        const defaultConsumer = useCallback((data: unknown) => {}, []);\n\n        const addChannel = useCallback(\n            (newChannelInfo: SubscribeInfo) => {\n                if (isMainConnected) {\n                    const curSubjects = connectedSubjectsRef.current;\n                    const targetSubjectIndex = curSubjects.findIndex(\n                        (curSubject) => curSubject.name === newChannelInfo.name,\n                    );\n\n                    if (targetSubjectIndex === -1) {\n                        // 不存在 => 新增订阅\n                        const newConnectedSubj: CountedSubject<unknown> = handleSubscribe(newChannelInfo);\n                        if (newConnectedSubj) {\n                            const subscription = newConnectedSubj.subscribe((val) => {\n                                checkDataEmpty(val);\n\n                                if (initSubscriptionMapRef.current && !isEmpty(initSubscriptionMapRef.current)) {\n                                    const consumer =\n                                        initSubscriptionMapRef.current[newChannelInfo.name]?.consumer ??\n                                        defaultConsumer;\n                                    consumer(val);\n                                }\n                            });\n\n                            curSubjects.push({\n                                name: newChannelInfo.name,\n                                connectedSubject: newConnectedSubj,\n                            });\n\n                            subscriptionsRef.current.push({\n                                name: newChannelInfo.name,\n                                subscription,\n                            });\n                        }\n                    } else {\n                        // 存在 => 重新订阅\n                        const subscriptionIndex = subscriptionsRef.current.findIndex(\n                            (subscription) => subscription.name === newChannelInfo.name,\n                        );\n                        const curSubscription = subscriptionsRef.current[subscriptionIndex];\n\n                        curSubscription.subscription.unsubscribe();\n\n                        const newConnectedSubj: CountedSubject<unknown> = handleSubscribe(newChannelInfo);\n                        if (newConnectedSubj) {\n                            const newSubscription = newConnectedSubj.subscribe((val) => {\n                                checkDataEmpty(val);\n\n                                if (initSubscriptionMapRef.current && !isEmpty(initSubscriptionMapRef.current)) {\n                                    const consumer =\n                                        initSubscriptionMapRef.current[newChannelInfo.name]?.consumer ??\n                                        defaultConsumer;\n                                    consumer(val);\n                                }\n                            });\n\n                            // 2.2替换掉connectedSubjectsRef.current数组中对应的subject\n                            curSubjects[targetSubjectIndex] = {\n                                name: newChannelInfo.name,\n                                connectedSubject: newConnectedSubj,\n                            };\n\n                            subscriptionsRef.current[subscriptionIndex] = {\n                                name: newChannelInfo.name,\n                                subscription: newSubscription,\n                            };\n                        }\n                    }\n                }\n            },\n            [isMainConnected],\n        );\n\n        const closeSubcription = useCallback(\n            (name: string) => {\n                const targetSubjectIndex = connectedSubjectsRef.current.findIndex(\n                    (curSubject) => curSubject.name === name,\n                );\n\n                if (targetSubjectIndex !== -1) {\n                    const subscriptionIndex = subscriptionsRef.current.findIndex(\n                        (subscription) => subscription.name === name,\n                    );\n                    const curSubscription = subscriptionsRef.current[subscriptionIndex];\n\n                    curSubscription.subscription.unsubscribe();\n\n                    subscriptionsRef.current = subscriptionsRef.current.filter(\n                        (subscriptionInfo) => subscriptionInfo.name !== name,\n                    );\n                    connectedSubjectsRef.current = connectedSubjectsRef.current.filter(\n                        (connectedSubjectInfo) => connectedSubjectInfo.name !== name,\n                    );\n                }\n            },\n            [isMainConnected],\n        );\n\n        const setKeyDownHandlers = useCallback((handlers: KeyHandlers[]) => {\n            _setKeyDownHandlers(handlers);\n        }, []);\n\n        const setKeyUpHandlers = useCallback((handlers: KeyHandlers[]) => {\n            _setKeyUpHandlers(handlers);\n        }, []);\n\n        const NoDataPlaceHolder = useMemo(\n            () => (\n                <EmptyPlaceHolder\n                    style={{\n                        display: hasSubscribed && hasData ? 'none' : 'flex',\n                    }}\n                    text={t('noMessages')}\n                />\n            ),\n            [hasSubscribed, hasData],\n        );\n\n        useEffect(() => {\n            if (!isMainConnected || metadata.length <= 0) return noop;\n            if (subscribeInfo) {\n                const len = subscribeInfo?.length;\n                // const obs: CountedSubject<unknown>[] = [];\n                for (let i = 0; i < len; i += 1) {\n                    const curSubcibe = subscribeInfo[i];\n                    const name = curSubcibe?.name;\n\n                    const curItem = metadata.find((item) => item.dataName === name);\n                    if (!curItem) {\n                        // eslint-disable-next-line no-continue\n                        continue;\n                    }\n\n                    const connectedSubj: CountedSubject<unknown> = handleSubscribe(curSubcibe);\n                    // 2.若包含channel => subcribeToDataWithChannel => obs.push\n                    if (connectedSubj) {\n                        connectedSubjectsRef.current.push({\n                            name,\n                            connectedSubject: connectedSubj,\n                        });\n                    }\n                }\n                if (!hasSubscribed) {\n                    setHasSubscribed(true);\n                }\n\n                // eslint-disable-next-line no-restricted-syntax\n                for (const subject of connectedSubjectsRef.current) {\n                    const subscription = subject.connectedSubject.subscribe((val) => {\n                        checkDataEmpty(val);\n\n                        if (initSubscriptionMapRef.current && !isEmpty(initSubscriptionMapRef.current)) {\n                            const consumer = initSubscriptionMapRef.current[subject.name].consumer ?? defaultConsumer;\n                            consumer(val);\n                        }\n                    });\n\n                    subscriptionsRef.current.push({\n                        name: subject.name,\n                        subscription,\n                    });\n                }\n            }\n\n            return () => {\n                subscriptionsRef.current.forEach((subscription) => {\n                    subscription.subscription.unsubscribe();\n                });\n            };\n        }, [isMainConnected]);\n\n        useNotifyInitialChanel(panelId, addChannel);\n        useUpdateChannel(panelId, addChannel);\n\n        const style = useMemo(\n            () => ({\n                display: hasSubscribed && hasData ? 'block' : 'none',\n            }),\n            [hasSubscribed, hasData],\n        );\n\n        const contextValue = useMemo(\n            () => ({\n                panelId,\n                initSubscription,\n                logger,\n                metaData: _panelMetaData,\n                splitPanel,\n                closePanel,\n                updateMetaData,\n                enterFullScreen,\n                exitFullScreen,\n                onPanelResize,\n                data: combinedData,\n                addChannel,\n                updateChannel,\n                closeSubcription,\n                setKeyDownHandlers,\n                setKeyUpHandlers,\n            }),\n            [\n                logger,\n                updateChannel,\n                initSubscription,\n                _panelMetaData,\n                splitPanel,\n                closePanel,\n                updateMetaData,\n                enterFullScreen,\n                exitFullScreen,\n                onPanelResize,\n                combinedData,\n                addChannel,\n                closeSubcription,\n                setKeyDownHandlers,\n                setKeyUpHandlers,\n            ],\n        );\n\n        return (\n            <PanelContext.Provider value={contextValue}>\n                <KeyListener active={isSelected} keyDownHandlers={keyDownHandlers} keyUpHandlers={keyUpHandlers} />\n                <PanelRoot style={style} onClick={onPanleClick} ref={panelRootRef}>\n                    <PanelComponent {...props} />\n                </PanelRoot>\n                {NoDataPlaceHolder}\n            </PanelContext.Provider>\n        );\n    }\n\n    return Object.assign(React.memo(PanelWrapper), {\n        displayName: PanelComponent.displayName || PanelComponent.name,\n    });\n}\n","import { useCallback, useEffect, useRef } from 'react';\nimport { CustomizeEvent, useEventHandlersContext } from '../store/EventHandlersStore';\nimport { SubscribeInfo } from '../components/panels/type/RenderToolBar';\n\nexport default function useGetUpdateChannel(panelId: string) {\n    const eventHandlers = useEventHandlersContext();\n    const { customizeSubs } = eventHandlers;\n    const updateChannelEventRef = useRef<CustomizeEvent>();\n    const updateChannel = useCallback((newChannel: SubscribeInfo) => {\n        if (updateChannelEventRef.current) {\n            updateChannelEventRef.current.publish(newChannel);\n        }\n    }, []);\n\n    useEffect(() => {\n        updateChannelEventRef.current = customizeSubs.getCustomizeEvent(`channel:update:${panelId}`);\n    }, [panelId]);\n\n    return updateChannel;\n}\n","import { useEffect, useRef } from 'react';\nimport { CustomizeEvent, useEventHandlersContext } from '../store/EventHandlersStore';\n\nexport default function useNotifyInitialChanel(panelId: string, addChannel: (newChannel: any) => void) {\n    const eventHandlers = useEventHandlersContext();\n    const { customizeSubs } = eventHandlers;\n    const eventRef = useRef<CustomizeEvent>();\n\n    useEffect(() => {\n        eventRef.current = customizeSubs.getCustomizeEvent(`channel:notify:${panelId}`);\n        if (eventRef.current) {\n            eventRef.current.subscribe(addChannel);\n        }\n    }, [addChannel]);\n\n    useEffect(\n        () => () => {\n            if (eventRef.current) {\n                eventRef.current.removeSubscribe();\n            }\n        },\n        [],\n    );\n\n    return eventRef.current;\n}\n","import { useEffect, useRef } from 'react';\nimport { CustomizeEvent, useEventHandlersContext } from '../store/EventHandlersStore';\n\nexport default function useUpdateChannel(panelId: string, updateChannel: (newChannel: any) => void) {\n    const eventHandlers = useEventHandlersContext();\n    const { customizeSubs } = eventHandlers;\n    const eventRef = useRef<CustomizeEvent>();\n\n    useEffect(() => {\n        eventRef.current = customizeSubs.getCustomizeEvent(`channel:update:${panelId}`);\n        if (eventRef.current) {\n            eventRef.current.subscribe(updateChannel);\n        }\n    }, [updateChannel]);\n\n    useEffect(\n        () => () => {\n            if (eventRef.current) {\n                eventRef.current.removeSubscribe();\n            }\n        },\n        [],\n    );\n\n    return eventRef.current;\n}\n","import { createContext, useContext } from 'react';\nimport Logger from '@dreamview/log';\nimport { MosaicDirection } from 'react-mosaic-component';\nimport { OnResizeCallback } from 'react-resize-detector/build/types/types';\nimport { SubscribeInfo } from '../../../type/RenderToolBar';\nimport { KeyHandlers } from '../../KeyListener';\n\nexport type DataConsumer = (data: unknown) => void;\nexport type Unsubscribe = (subscribersCount: number) => void;\nexport type PanelMetaData = { panelId?: string } & Record<string, any>;\nexport type InitSubscriptionMap = Record<string, { consumer: DataConsumer }>;\nexport interface IPanelContext {\n    panelId: string;\n    initSubscription: (value: InitSubscriptionMap) => void;\n    logger: Logger;\n    metaData: PanelMetaData;\n    splitPanel: (direction: MosaicDirection) => void;\n    closePanel: () => void;\n    updateMetaData: (newMetaData: PanelMetaData) => void;\n    enterFullScreen: () => void;\n    exitFullScreen: () => void;\n    onPanelResize: (onResize: OnResizeCallback) => void;\n    data: Record<string, any>;\n    addChannel: (newChannelInfo: SubscribeInfo) => void;\n    updateChannel: (newChannel: SubscribeInfo) => void;\n    closeSubcription: (name: string) => void;\n    setKeyUpHandlers: (handlers: KeyHandlers[]) => void;\n    setKeyDownHandlers: (handlers: KeyHandlers[]) => void;\n}\n\nexport const PanelContext = createContext<IPanelContext | undefined>(undefined);\n\nexport function usePanelContext(): IPanelContext {\n    return useContext(PanelContext);\n}\n"],"names":["PanelRoot","forwardRef","props","ref","className","rest","_objectWithoutProperties","_excluded","prefixCls","getPrefixCls","classes","classNames","React","_extends","children","displayName","EmptyPlaceHolder","useMakeStyle","theme","display","flexDirection","justifyContent","alignItems","height","width","fontFamily","fontSize","color","backgroundColor","error","tokens","colors","info","brand2","warn","hoc","style","src","require","alt","text","getMultiPressedKey","observableEvent","cb","keys","functionalKey","isPressedKeys","Array","length","fill","forEach","key","index","pipe","filter","event","KeyboardEvent","_event$key","lowerKey","toLowerCase","eventKey","clearerTimer","setTimeout","clearTimeout","subscribe","reduce","prev","cur","preventDefault","KeyListener","_props$active","active","keyDownHandlers","keyUpHandlers","elementRef","useRef","activeRef","useEffect","current","len","_loop","setKeyDown","fromEvent","document","keyDownHandler","i","handler","_loop2","setKeyUp","keyUpHandler","Panel","PanelComponent","panelId","subscribeInfo","panelMetaData","PanelWrapper","_useWebSocketServices","useWebSocketServices","isMainConnected","streamApi","metadata","panelCatalog","usePanelCatalogContext","mosaicActions","useContext","MosaicContext","mosaicWindowActions","MosaicWindowContext","_usePanelInfoStore2","_slicedToArray","usePanelInfoStore","panelInfoState","panelInfoDispatch","t","useTranslation","_useState2","useState","_panelMetaData","setPanelMetaData","_useFullScreen2","useFullScreen","enterFullScreen","exitFullScreen","_useState4","hasSubscribed","setHasSubscribed","_useState6","hasData","setHasData","_useState8","combinedData","connectedSubjectsRef","subscriptionsRef","initSubscriptionMapRef","resizeCallBackRef","_useState10","_setKeyDownHandlers","_useState12","_setKeyUpHandlers","updateChannel","customizeSubs","useEventHandlersContext","updateChannelEventRef","useCallback","newChannel","publish","getCustomizeEvent","concat","useGetUpdateChannel","panel","useMemo","get","isSelected","_panelInfoState$selec","_panelInfoState$selec2","selectedPanelIds","has","initSubscription","val","logger","Logger","getInstance","panelRootRef","useResizeDetector","onResize","onPanelResize","splitPanel","direction","root","getRoot","ownPath","getPath","newId","genereatePanelId","type","replaceWith","second","first","getAndAssertNodeAtPathExists","closePanel","remove","updateMetaData","newMetaData","_objectSpread","onPanleClick","addSelectedPanelId","checkDataEmpty","isEmpty","handleSubscribe","newChannelInfo","newConnectedSubj","needChannel","name","channel","subscribeToDataWithChannelFuzzy","subscribeToDataWithChannel","subscribeToData","defaultConsumer","data","addChannel","curSubjects","targetSubjectIndex","findIndex","curSubject","subscription","_initSubscriptionMapR","_initSubscriptionMapR2","consumer","push","connectedSubject","subscriptionIndex","unsubscribe","newSubscription","_initSubscriptionMapR3","_initSubscriptionMapR4","closeSubcription","subscriptionInfo","connectedSubjectInfo","setKeyDownHandlers","handlers","setKeyUpHandlers","NoDataPlaceHolder","noop","curSubcibe","find","item","dataName","connectedSubj","_step","_iterator","_createForOfIteratorHelper","subject","value","_initSubscriptionMapR5","s","n","done","err","e","f","eventRef","removeSubscribe","useNotifyInitialChanel","useUpdateChannel","contextValue","metaData","PanelContext","Provider","onClick","Object","assign","createContext","undefined","usePanelContext"],"sourceRoot":""}