{"version":3,"file":"681.70feeb3c2eb3a515e43b.js","mappings":"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","sources":["webpack:///../../../dreamview-core/src/components/panels/VehicleViz/LayerMenu/params.ts","webpack:///../../../dreamview-core/src/components/panels/VehicleViz/LayerMenu/index.tsx","webpack:///../../../dreamview-core/src/components/panels/VehicleViz/index.tsx"],"sourcesContent":["export interface subMenuParams {\n    [key: string]: {\n        defaultVisible: boolean;\n        currentVisible: boolean;\n        vizKey: string;\n    };\n}\n\nexport const layerMenuParams: { [key: string]: subMenuParams } = {\n    Perception: {\n        polygon: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'polygon',\n        },\n        boundingbox: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'boundingbox',\n        },\n\n        pointCloud: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'pointCloud',\n        },\n        unknownMovable: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'unknownMovable',\n        },\n        vehicle: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'vehicle',\n        },\n        unknownStationary: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'unknownUnMovable',\n        },\n        pedestrian: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'pedestrian',\n        },\n        unknown: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'unknown',\n        },\n        bicycle: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'bicycle',\n        },\n        cipv: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'cipv',\n        },\n        velocity: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleVelocity',\n        },\n        heading: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleHeading',\n        },\n        id: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleId',\n        },\n        distanceAndSpeed: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleDistanceAndSpeed',\n        },\n        laneMarker: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'laneMarker',\n        },\n        lidarSensor: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'lidarSensor',\n        },\n        radarSensor: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'radarSensor',\n        },\n        cameraSensor: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'cameraSensor',\n        },\n        v2x: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'v2x',\n        },\n    },\n    Prediction: {\n        priority: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstaclePriority',\n        },\n        majorPredictionLine: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'majorPredictionLine',\n        },\n        gaussianInfo: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'gaussianInfo',\n        },\n        minorPredictionLine: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'minorPredictionLine',\n        },\n        interactiveTag: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleInteractiveTag',\n        },\n    },\n    Routing: {\n        routingLine: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'routingLine',\n        },\n    },\n    Decision: {\n        mainDecision: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'mainDecision',\n        },\n        obstacleDecision: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'obstacleDecision',\n        },\n    },\n    Planning: {\n        planningCar: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'planningCar',\n        },\n        planningTrajectory: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'planningTrajectory',\n        },\n        // 'RSS Info': {\n        //     defaultVisible: false,\n        //     currentVisible: false,\n        //     vizKey: 'pointCloud',\n        // },\n    },\n    Position: {\n        localization: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'localization',\n        },\n        gps: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'gps',\n        },\n        shadow: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'shadow',\n        },\n    },\n    Map: {\n        crosswalk: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'crosswalk',\n        },\n        clearArea: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'clearArea',\n        },\n        junction: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'junction',\n        },\n        pncJunction: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'pncJunction',\n        },\n        lane: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'lane',\n        },\n        road: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'road',\n        },\n        signal: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'signal',\n        },\n        stopSign: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'stopSign',\n        },\n        yieldSign: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'yieldSign',\n        },\n        speedBump: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'speedBump',\n        },\n        parkingSpace: {\n            defaultVisible: true,\n            currentVisible: true,\n            vizKey: 'parkingSpace',\n        },\n        parkingSpaceId: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'parkingSpaceId',\n        },\n        laneId: {\n            defaultVisible: false,\n            currentVisible: false,\n            vizKey: 'laneId',\n        },\n    },\n};\n\nexport const formatLayerParams = (params: { [key: string]: subMenuParams }) => {\n    const result: { [key: string]: { [key: string]: boolean } } = {};\n    Object.keys(params).forEach((key) => {\n        const subLayerMenu = params[key];\n        Object.keys(subLayerMenu).forEach((subKey) => {\n            const subParams = subLayerMenu[subKey];\n            result[key] = result[key] || {};\n            result[key][subParams.vizKey] = subParams.currentVisible;\n        });\n    });\n    return result;\n};\n\nexport const getCurrentLayerParams = () => {\n    const localStorageLayerMenuParams = localStorage.getItem('layerMenuParams');\n    let curLayerMenuParams = null;\n    if (localStorageLayerMenuParams) {\n        curLayerMenuParams = JSON.parse(localStorageLayerMenuParams);\n    } else {\n        curLayerMenuParams = layerMenuParams;\n    }\n    return curLayerMenuParams;\n};\n","import React, { useCallback, useState } from 'react';\nimport { Checkbox, Radio } from '@dreamview/dreamview-ui';\nimport { useTranslation } from 'react-i18next';\nimport useStyle from '../useStyle';\nimport { layerMenuParams, formatLayerParams, getCurrentLayerParams } from './params';\nimport { usePanelContext } from '../../base/store/PanelStore';\nimport { StreamDataNames } from '../../../../services/api/types';\nimport useWebSocketServices from '../../../../services/hooks/useWebSocketServices';\n\nexport default function LayerMenu(props: any) {\n    const { classes, cx } = useStyle();\n    const { carviz, pointCloudFusionChannel } = props;\n    const { t } = useTranslation('layerMenu');\n    const panelContext = usePanelContext();\n    const { updateChannel, closeSubcription } = panelContext;\n\n    const { metadata } = useWebSocketServices();\n\n    const checkBoxDisabled = useCallback(\n        (key: string) => {\n            if (key === 'pointCloud') {\n                // 优先判断channels字符串数组中是否有'compensator'，然后判断是否有'fusion'\n                const pointCloudChannels = metadata.find(\n                    (item) => item.dataName === StreamDataNames.POINT_CLOUD,\n                )?.channels;\n\n                if (Array.isArray(pointCloudChannels)) {\n                    const hasCompensator = pointCloudChannels.some((item) => item.includes('compensator'));\n                    const hasFusion = pointCloudChannels.some((item) => item.includes('fusion'));\n                    return !(hasCompensator || hasFusion);\n                }\n            }\n            return false;\n        },\n        [metadata],\n    );\n\n    const curLayerMenuParams = getCurrentLayerParams();\n    localStorage.setItem('layerMenuParams', JSON.stringify(curLayerMenuParams));\n    carviz.option.updateLayerOption(formatLayerParams(curLayerMenuParams), 'vehicle');\n\n    const [layerMenu, setLayerMenu] = useState(curLayerMenuParams);\n    const [menu] = useState(Object.keys(layerMenu));\n    const [currentMenu, setCurrentMenu] = useState(menu[0]);\n    const [subMenu, setSubMenu] = useState(layerMenu[currentMenu]);\n\n    const resetLayerMenu = () => {\n        setLayerMenu(() => layerMenuParams);\n        carviz.option.updateLayerOption(formatLayerParams(layerMenuParams), 'vehicle');\n        localStorage.setItem('layerMenuParams', JSON.stringify(layerMenuParams));\n    };\n    return (\n        <div className={classes['layer-menu-container']}>\n            <div className={classes['layer-menu-header']}>\n                <div className={classes['layer-menu-header-left']}>{t('layerMenu')}</div>\n                <div className={classes['layer-menu-header-right']}>\n                    <div className={classes['layer-menu-header-reset-btn']} onClick={resetLayerMenu}>\n                        {t('restoreDefaultSettings')}\n                    </div>\n                </div>\n            </div>\n            <div className={classes['layer-menu-content']}>\n                <div className={classes['layer-menu-content-left']}>\n                    {menu.map((item) => (\n                        <li\n                            key={item}\n                            className={cx(classes['layer-menu-content-left-li'], {\n                                [classes['li-active']]: currentMenu === item,\n                            })}\n                            onClick={() => {\n                                setCurrentMenu(item);\n                                setSubMenu(layerMenu[item]);\n                            }}\n                        >\n                            <span>{t(item)}</span>\n                        </li>\n                    ))}\n                </div>\n                <div className={classes['layer-menu-content-right']}>\n                    {currentMenu === 'Perception' && (\n                        <>\n                            <li className={classes['layer-menu-content-right-li']}>\n                                <span className={classes['layer-menu-content-right-switch']}>\n                                    <Radio\n                                        checked={layerMenu?.Perception?.polygon?.currentVisible}\n                                        onChange={(e: any) => {\n                                            const value = e.target.checked;\n                                            if (value) {\n                                                const newMenu = {\n                                                    ...layerMenu.Perception,\n                                                    polygon: {\n                                                        ...layerMenu.Perception.polygon,\n                                                        currentVisible: true,\n                                                    },\n                                                    boundingbox: {\n                                                        ...layerMenu.Perception.boundingbox,\n                                                        currentVisible: false,\n                                                    },\n                                                };\n                                                const newLayerMenu = {\n                                                    ...layerMenu,\n                                                    [currentMenu]: newMenu,\n                                                };\n                                                setSubMenu(() => newMenu);\n                                                setLayerMenu(() => newLayerMenu);\n                                                carviz.option.updateLayerOption(\n                                                    formatLayerParams(newLayerMenu),\n                                                    'vehicle',\n                                                );\n                                                localStorage.setItem('layerMenuParams', JSON.stringify(newLayerMenu));\n                                            }\n                                        }}\n                                    />\n                                </span>\n                                <span className={classes['layer-menu-content-right-label']}>{t('polygon')}</span>\n                            </li>\n                            <li className={classes['layer-menu-content-right-li']}>\n                                <span className={classes['layer-menu-content-right-switch']}>\n                                    <Radio\n                                        checked={layerMenu?.Perception?.boundingbox?.currentVisible}\n                                        onChange={(e) => {\n                                            const value = e.target.checked;\n                                            if (value) {\n                                                const newMenu = {\n                                                    ...layerMenu.Perception,\n                                                    polygon: {\n                                                        ...layerMenu.Perception.polygon,\n                                                        currentVisible: false,\n                                                    },\n                                                    boundingbox: {\n                                                        ...layerMenu.Perception.boundingbox,\n                                                        currentVisible: true,\n                                                    },\n                                                };\n                                                const newLayerMenu = {\n                                                    ...layerMenu,\n                                                    [currentMenu]: newMenu,\n                                                };\n                                                setSubMenu(() => newMenu);\n                                                setLayerMenu(() => newLayerMenu);\n                                                carviz.option.updateLayerOption(\n                                                    formatLayerParams(newLayerMenu),\n                                                    'vehicle',\n                                                );\n                                                localStorage.setItem('layerMenuParams', JSON.stringify(newLayerMenu));\n                                            }\n                                        }}\n                                    />\n                                </span>\n                                <span className={classes['layer-menu-content-right-label']}>{t('boundingbox')}</span>\n                            </li>\n                            <div className={classes['layer-menu-horizontal-line']} />\n                        </>\n                    )}\n\n                    {Object.keys(subMenu).map((key) => {\n                        const { currentVisible } = layerMenu[currentMenu][key] || {};\n                        return (\n                            key !== 'polygon' &&\n                            key !== 'boundingbox' && (\n                                <li className={classes['layer-menu-content-right-li']} key={key}>\n                                    <span className={classes['layer-menu-content-right-switch']}>\n                                        <Checkbox\n                                            checked={currentVisible}\n                                            disabled={checkBoxDisabled(key)}\n                                            defaultChecked={currentVisible}\n                                            onChange={(e) => {\n                                                const checked = e.target.checked;\n                                                const newMenu = {\n                                                    ...layerMenu[currentMenu],\n                                                    [key]: {\n                                                        ...layerMenu[currentMenu][key],\n                                                        currentVisible: checked,\n                                                    },\n                                                };\n\n                                                const newLayerMenu = {\n                                                    ...layerMenu,\n                                                    [currentMenu]: newMenu,\n                                                };\n                                                setSubMenu(() => newMenu);\n                                                setLayerMenu(() => newLayerMenu);\n                                                carviz.option.updateLayerOption(\n                                                    formatLayerParams(newLayerMenu),\n                                                    'vehicle',\n                                                );\n                                                localStorage.setItem('layerMenuParams', JSON.stringify(newLayerMenu));\n                                                if (\n                                                    checked &&\n                                                    key === 'pointCloud' &&\n                                                    !checkBoxDisabled(key) &&\n                                                    pointCloudFusionChannel\n                                                ) {\n                                                    updateChannel({\n                                                        name: StreamDataNames.POINT_CLOUD,\n                                                        needChannel: true,\n                                                        channel: pointCloudFusionChannel,\n                                                    });\n                                                }\n                                                if (!checked && key === 'pointCloud') {\n                                                    carviz.removePointCloud();\n                                                    closeSubcription(StreamDataNames.POINT_CLOUD);\n                                                }\n                                            }}\n                                        />\n                                    </span>\n                                    <span className={classes['layer-menu-content-right-label']}>{t(key)}</span>\n                                </li>\n                            )\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport Carviz from '@dreamview/dreamview-carviz/src/index';\nimport { Popover, IconIcCoverageHover } from '@dreamview/dreamview-ui';\nimport { useTranslation } from 'react-i18next';\nimport shortUUID from 'short-uuid';\nimport type { apollo } from '@dreamview/dreamview';\nimport useStyle from './useStyle';\nimport LayerMenu from './LayerMenu';\nimport ViewMenu from './ViewMenu';\nimport ViewBtn from './ViewBtn';\nimport { usePanelContext } from '../base/store/PanelStore';\nimport { usePickHmiStore } from '../../../store/HmiStore';\nimport { formatLayerParams, getCurrentLayerParams } from './LayerMenu/params';\nimport Panel from '../base/Panel';\nimport { StreamDataNames } from '../../../services/api/types';\nimport { isMac, isWin } from './util';\nimport './index.less';\nimport useWebSocketServices from '../../../services/hooks/useWebSocketServices';\n\ntype ISimulationWorld = apollo.dreamview.ISimulationWorld;\ntype IMap = apollo.hdmap.IMap;\ntype IPointCloud = apollo.dreamview.IPointCloud;\n\nfunction Viz() {\n    const panelContext = usePanelContext();\n    const [hmi] = usePickHmiStore();\n    const [uid] = useState(shortUUID.generate);\n    const { initSubscription, logger, updateChannel } = panelContext;\n    const { classes } = useStyle();\n    const [currentView, setCurrentView] = useState('D');\n    const [carviz] = useState(() => new Carviz(uid));\n    const { t } = useTranslation('viewMenu');\n\n    useEffect(() => {\n        initSubscription({\n            [StreamDataNames.SIM_WORLD]: {\n                consumer: (simDdata) => {\n                    if (!simDdata) return;\n                    if (Object.keys(simDdata).length !== 0) {\n                        carviz.updateData(simDdata);\n                        carviz.render();\n                    }\n                },\n            },\n            [StreamDataNames.Map]: {\n                consumer: (mapData) => {\n                    if (!mapData) return;\n                    const data = {\n                        map: mapData,\n                    };\n                    carviz?.updateData(data);\n                    carviz.render();\n                },\n            },\n            [StreamDataNames.POINT_CLOUD]: {\n                consumer: (pointData) => {\n                    if (!pointData) return;\n                    const data = {\n                        pointCloud: pointData,\n                    };\n                    carviz?.updateData(data);\n                    carviz.render();\n                },\n            },\n        });\n    }, []);\n\n    useEffect(() => {\n        carviz.init();\n        const curLayerMenuParams = getCurrentLayerParams();\n        localStorage.setItem('layerMenuParams', JSON.stringify(curLayerMenuParams));\n        carviz.option.updateLayerOption(formatLayerParams(curLayerMenuParams), 'vehicle');\n        // 如果勾选了点云按钮，则订阅点云通道\n        if (curLayerMenuParams.Perception.pointCloud.currentVisible) {\n            setTimeout(() => {\n                updateChannel({\n                    name: StreamDataNames.POINT_CLOUD,\n                    needChannel: false,\n                });\n            }, 0);\n        }\n\n        // 监听键盘事件\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            if (((e.metaKey && isMac()) || (e.ctrlKey && isWin())) && e.code === 'Equal') {\n                e.preventDefault();\n                carviz.view?.updateViewDistance(-10);\n            }\n            if (((e.metaKey && isMac()) || (e.ctrlKey && isWin())) && e.code === 'Minus') {\n                e.preventDefault();\n                carviz.view?.updateViewDistance(10);\n            }\n        });\n    }, []);\n\n    const { metadata } = useWebSocketServices();\n\n    const pointCloudFusionChannel = useMemo(() => {\n        // 优先使用channels字符串数组中含有'compensator'的channel，然后如果没有使用含有'fusion'的channel\n        const fusionPointCloudChannel = metadata\n            .find((item) => item.dataName === StreamDataNames.POINT_CLOUD)\n            ?.channels?.filter((item) => item.includes('compensator') || item.includes('fusion'))\n            .sort(\n                // compensator排在前面，fusion排在后面\n                (a) => (a.includes('compensator') ? -1 : 1),\n            );\n\n        if (Array.isArray(fusionPointCloudChannel)) {\n            return fusionPointCloudChannel[0];\n        }\n        return '';\n    }, [metadata]);\n\n    const pointCloudCurrentVisible = useMemo(() => {\n        const curLayerMenuParams = getCurrentLayerParams();\n        return curLayerMenuParams.Perception.pointCloud.currentVisible;\n    }, []);\n\n    useEffect(() => {\n        if (pointCloudCurrentVisible) {\n            // 如果勾选了点云按钮，则订阅点云通道\n            updateChannel({\n                name: StreamDataNames.POINT_CLOUD,\n                needChannel: true,\n                channel: pointCloudFusionChannel,\n            });\n        }\n    }, [metadata, pointCloudCurrentVisible, pointCloudFusionChannel]);\n\n    useEffect(() => {\n        carviz?.removeAll();\n    }, [hmi.currentRecordId]);\n    return (\n        <div className={classes['viz-container']}>\n            <div id={uid} className={classes['web-gl']} />\n            <div className={classes['viz-btn-container']}>\n                <Popover\n                    placement='leftTop'\n                    content={<LayerMenu carviz={carviz} pointCloudFusionChannel={pointCloudFusionChannel} />}\n                    trigger='click'\n                >\n                    <span className={classes['viz-btn-item']}>\n                        <IconIcCoverageHover />\n                    </span>\n                </Popover>\n\n                <Popover\n                    overlayClassName={classes['layer-menu-popover']}\n                    placement='leftBottom'\n                    content={<ViewMenu carviz={carviz} setCurrentView={setCurrentView} />}\n                    trigger='click'\n                    style={{ padding: '0 !importent' }}\n                >\n                    <span className={classes['viz-btn-item']}>{currentView}</span>\n                </Popover>\n                <ViewBtn carviz={carviz} />\n            </div>\n        </div>\n    );\n}\n\nexport default function VehicleViz(props: any) {\n    const Component = useMemo(\n        () =>\n            Panel(Viz, props.panelId, [\n                { name: StreamDataNames.SIM_WORLD, needChannel: false },\n                { name: StreamDataNames.Map, needChannel: false },\n            ]),\n        [],\n    );\n\n    return <Component {...props} />;\n}\n\nViz.displayName = 'VehicleViz';\n"],"names":["layerMenuParams","Perception","polygon","defaultVisible","currentVisible","vizKey","boundingbox","pointCloud","unknownMovable","vehicle","unknownStationary","pedestrian","unknown","bicycle","cipv","velocity","heading","id","distanceAndSpeed","laneMarker","lidarSensor","radarSensor","cameraSensor","v2x","Prediction","priority","majorPredictionLine","gaussianInfo","minorPredictionLine","interactiveTag","Routing","routingLine","Decision","mainDecision","obstacleDecision","Planning","planningCar","planningTrajectory","Position","localization","gps","shadow","Map","crosswalk","clearArea","junction","pncJunction","lane","road","signal","stopSign","yieldSign","speedBump","parkingSpace","parkingSpaceId","laneId","formatLayerParams","params","result","Object","keys","forEach","key","subLayerMenu","subKey","subParams","getCurrentLayerParams","localStorageLayerMenuParams","localStorage","getItem","JSON","parse","LayerMenu","props","_layerMenu$Perception","_layerMenu$Perception2","_useStyle","useStyle","classes","cx","carviz","pointCloudFusionChannel","t","useTranslation","panelContext","usePanelContext","updateChannel","closeSubcription","metadata","useWebSocketServices","checkBoxDisabled","useCallback","_metadata$find","pointCloudChannels","find","item","dataName","StreamDataNames","POINT_CLOUD","channels","Array","isArray","hasCompensator","some","includes","hasFusion","curLayerMenuParams","setItem","stringify","option","updateLayerOption","_useState2","_slicedToArray","useState","layerMenu","setLayerMenu","menu","_useState6","currentMenu","setCurrentMenu","_useState8","subMenu","setSubMenu","React","className","onClick","map","_defineProperty","Radio","checked","onChange","e","target","newMenu","_objectSpread","newLayerMenu","Checkbox","disabled","defaultChecked","name","needChannel","channel","removePointCloud","Viz","hmi","usePickHmiStore","uid","shortUUID","initSubscription","logger","_useState4","currentView","setCurrentView","Carviz","useEffect","_initSubscription","SIM_WORLD","consumer","simDdata","length","updateData","render","mapData","data","pointData","init","setTimeout","document","addEventListener","_carviz$view","_carviz$view2","metaKey","isMac","ctrlKey","isWin","code","preventDefault","view","updateViewDistance","useMemo","fusionPointCloudChannel","filter","sort","a","pointCloudCurrentVisible","removeAll","currentRecordId","Popover","placement","content","trigger","IconIcCoverageHover","overlayClassName","ViewMenu","style","padding","ViewBtn","VehicleViz","Component","Panel","panelId","displayName"],"sourceRoot":""}