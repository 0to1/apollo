syntax = "proto2";

package apollo.perception.pipeline;

// pipeline
import "modules/perception/pipeline/proto/camera_detection_config.proto";
import "modules/perception/pipeline/proto/lane_detection_config.proto";
import "modules/perception/pipeline/proto/lidar_detection_config.proto";
import "modules/perception/pipeline/proto/traffic_light_config.proto";
// stage
import "modules/perception/pipeline/proto/stage/detection.proto";
import "modules/perception/pipeline/proto/stage/fused_classifier_config.proto";
import "modules/perception/pipeline/proto/stage/map_manager_config.proto";
import "modules/perception/pipeline/proto/stage/mlf_engine_config.proto";
import "modules/perception/pipeline/proto/stage/object_filter_bank_config.proto";
import "modules/perception/pipeline/proto/stage/pbf_tracker_config.proto";
import "modules/perception/pipeline/proto/stage/pointcloud_preprocessor_config.proto";
import "modules/perception/pipeline/proto/stage/recognition.proto";
import "modules/perception/pipeline/proto/stage/semantic.proto";

// plugin
import "modules/perception/pipeline/proto/plugin/roi_boundary_filter_config.proto";


// plugin
enum PluginType {
  // filter
  ROI_BOUNDARY_FILTER = 1;

}

message PluginConfig {
  optional PluginType plugin_type = 1;
  optional bool enabled = 2 [default = true];

  reserved 3 to 9;

  oneof plugin_config {
    ROIBoundaryFilterConfig roi_boundary_filter_config = 10;
  }
}

// stage
enum StageType {
  // preprocessors
  // traffic light preprocessors
  TL_PREPROCESSOR = 1;
  // lidar preprocessors
  POINTCLOUD_PREPROCESSOR = 2;
  // radar preprocessors
  CONTI_ARS_PREPROCESSOR = 3;

  MAP_MANAGER = 4;


  // detectors
  // camera detectors
  SMOKE_OBSTACLE_DETECTOR = 21;
  YOLO_OBSTACLE_DETECTOR = 22;
  YOLOV4_OBSTACLE_DETECTOR = 23;
  // lane detectors
  DARKSCNN_LANE_DETECTOR = 24;
  DENSELINE_LANE_DETECTOR = 25;
  // traffic light detectors
  TRAFFIC_LIGHT_DETECTION = 26;
  TRAFFIC_LIGHT_RECOGNITION = 27;
  // lidar detectors
  CNN_SEGMENTATION = 28;
  MASK_PILLARS_DETECTION = 29;
  NCUT_SEGMENTATION = 30;
  POINT_PILLARS_DETECTION = 31;
  // radar detectors
  CONTI_ARS_DETECTOR = 32;

  // post processors
  // camera post processors
  OBJ_POST_PROCESSOR = 100;
  LOCATION_REFINER_OBSTACLE_POSTPROCESSOR = 101;
  // lane post processors
  DARKSCNN_LANE_POSTPROCESSOR = 102;
  DENSELINE_LANE_POSTPROCESSOR = 103;
  // lidar post processors
  OBJECT_BUILDER = 104;
  OBJECT_FILTER_BANK = 105;


  // tracker
  OMT_OBSTACLE_TRACKER = 120;
  SEMANTIC_REVISER = 121;
  MLF_TRACKER = 122;
  CONTI_ARS_TRACKER = 123;
  PBF_TRACKER = 124;
  MLF_ENGINE = 125;

  // classifier
  FUSED_CLASSIFIER = 126;

  HDMAP_RADAR_ROI_FILTER = 127;

  HM_ASSOCIATION = 128;

  PBF_GATEKEEPER = 129;

  EXTERNAL_FEATURE_EXTRACTOR = 130;

  MULTI_CUE_OBSTACLE_TRANSFORMER = 131;
}

message StageConfig {
  optional StageType stage_type = 1;
  optional bool enabled = 2 [default = true];

  repeated PluginConfig plugin_config = 4;

  reserved 5 to 9;

  oneof stage_config {
    lidar.PointCloudPreprocessorConfig pointcloud_preprocessor_config = 10;
    lidar.MapManagerConfig map_manager_config = 11;
    lidar.ObjectFilterBankConfig object_filter_bank_config = 12;

    lidar.MlfEngineConfig mlf_engine_config = 13;
    lidar.FusedClassifierConfig fused_classifier_config = 14;

    fusion.PbfTrackerConfig pbf_tracker_config = 15;

    stage.TrafficLightDetectionConfig traffic_light_detection_config = 16;
    stage.TrafficLightRecognitionConfig traffic_light_recognition_config = 17;
    stage.SemanticReviserConfig semantic_reviser_config = 18;
  }
}

enum PipelineType {
  LIDAR_DETECTION = 1;
}

// pipeline
message PipelineConfig {
  optional PipelineType pipeline_type = 1;
  repeated StageType stage_type = 2;
  repeated StageConfig stage_config = 3;

  reserved 4 to 9;

  oneof pipeline_config {
    CameraDetectionConfig camera_detection_config = 10;
    LidarDetectionConfig lidar_detection_config = 11;
    TrafficLightConfig traffic_light_config = 12;
    LaneDetectionConfig lane_detection_config = 13;
  }
}
